module disp7seg(binario, decodificacao);
	parameter tamanho = 6;
		
	input [tamanho - 1:0] binario;
	output reg [6:0] decodificacao;
	
	always @(binario) begin
	case(binario) //					               abcdefg
			8'b00000000: decodificacao = 7'b0000001; // 0
			8'b00000001: decodificacao = 7'b1001111; // 1
			8'b00000010: decodificacao = 7'b0010010; // 2
			8'b00000011: decodificacao = 7'b0000110; // 3
			8'b00000100: decodificacao = 7'b1001100; // 4
			8'b00000101: decodificacao = 7'b0100100; // 5
			8'b00000110: decodificacao = 7'b0100000; // 6
			8'b00000111: decodificacao = 7'b0001101; // 7
			8'b00001000: decodificacao = 7'b1111111; // 8
			8'b00001001: decodificacao = 7'b0000100; // 9
			8'b00001010: decodificacao = 7'b0001000; // A
			8'b00001011: decodificacao = 7'b1100000; // b
			8'b00001100: decodificacao = 7'b0110001; // C
			8'b00001101: decodificacao = 7'b1000010; // d
			8'b00001110: decodificacao = 7'b0110000; // E
			8'b00001111: decodificacao = 7'b0111000; // F
	endcase
	end
endmodule

// Para a placa
/* module TP1_parteI(SW, HEX0, HEX1, HEX2, HEX3, HEX4);
	
	input [17:0] SW;
	output [6:0] HEX0, HEX1, HEX2, HEX3, HEX4;
	
	reg [4:0] address; 
	reg clock; 
	reg [7:0] data; 
	reg wren;
	wire [7:0] q;
	
	address = SW[4:0];
	CLK = SW[17];
	data = SW[13:6];
	wren = SW[15];
	
	RAMlpm ram(address, clock, data, wren, q);
	
	disp7seg dispSeg0(q, HEX0);
	disp7seg dispSeg1(8'b11111111, HEX1);
	disp7seg dispSeg1(address, HEX2);
  disp7seg dispSeg1(8'b11111111, HEX3);
 	disp7seg dispSeg1(data, HEX4);	
 	
endmodule */

// Para a simulacao
module TP1_parteI(address, clock, data, wren, q);
	
	input [4:0] address; 
	input clock; 
	input [7:0] data; 
	input wren;
	output [7:0] q;
	
	RAMlpm ram(address, clock, data, wren, q);
 	
endmodule
